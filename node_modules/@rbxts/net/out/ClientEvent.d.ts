/// <reference types="@rbxts/types" />
/**
 * An event on the client
 * @rbxts client
 */
export default class NetClientEvent implements IClientNetEvent {
    /**
     * Create a new instance of the ClientEvent
     * @param name The name of the client event
     * @throws If created on server, or does not exist.
     */
    constructor(name: string);
    static WaitFor(name: string): Promise<NetClientEvent>;
    /**
     * Gets a RemoteEvent that's not managed by Net.
     *
     * Note: Any features like throttling, caching, type checking etc. will have to be handled by you.
     *
     * @param name The name
     */
    static Unmanaged(name: string): RemoteEvent;
    /**
     * The RemoteEvent instance
     */
    GetInstance(): RemoteEvent;
    /**
     * The RBXScriptConnection
     */
    GetEvent(): RBXScriptSignal<(...arguments: any[]) => void>;
    /**
     * Connect a function to fire when the event is invoked by the client
     * @param callback The function fired when the event is invoked by the client
     */
    Connect<T extends Array<any>>(callback: (...args: T) => void): RBXScriptConnection;
    /**
     * Sends the specified arguments to the server
     * @param args The arguments to send to the server
     */
    SendToServer<T extends Array<any>>(...args: T): void;
}
