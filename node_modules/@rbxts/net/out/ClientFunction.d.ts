/// <reference types="@rbxts/types" />
/**
 * A function on the client
 * @rbxts client
 */
export default class NetClientFunction<SR extends unknown> {
    constructor(name: string);
    static WaitFor<R extends any>(name: string): Promise<NetClientFunction<R>>;
    /**
     * Gets a RemoteFunction that's not managed by Net.
     *
     * Note: Any features like throttling, caching, type checking etc. will have to be handled by you.
     *
     * @param name The name
     */
    static Unmanaged(name: string): RemoteFunction;
    /**
     * The remoteFunction instance
     */
    GetInstance(): RemoteFunction;
    /**
     * The client cache in seconds
     */
    GetCache(): number;
    /**
     * Call the server with the specified arguments
     * @param args The arguments to call the server with
     * @returns the result of the call to the server
     */
    CallServer<T extends Array<any>>(...args: T): SR;
    /**
     * Call the server with the specified arguments asynchronously
     * @param args The args to call the server with
     * @async Will return a promise
     */
    CallServerAsync<T extends Array<any>>(...args: T): Promise<SR>;
}
