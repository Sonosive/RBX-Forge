/// <reference types="@rbxts/types" />
import { TypeGuard, StaticArguments, TypeGuards } from "./internal";
export interface ServerRecieverEvent<C> {
    Connect(callback: (sourcePlayer: Player, ...args: StaticArguments<C>) => void): RBXScriptConnection;
}
export interface ServerSenderEvent<F> {
    SendToAllPlayers(...args: StaticArguments<F>): void;
    SendToPlayer(player: Player, ...args: StaticArguments<F>): void;
    SendToPlayers(players: Array<Player>, ...args: StaticArguments<F>): void;
    SendToAllPlayersExcept(blacklist: Player | Array<Player>, ...args: StaticArguments<F>): void;
}
declare type InferEvent<T> = T extends [TypeGuard<infer A>] ? NetServerEvent<[TypeGuard<A>]> : T extends [TypeGuard<infer A>, TypeGuard<infer B>] ? NetServerEvent<[TypeGuard<A>, TypeGuard<B>]> : T extends [TypeGuard<infer A>, TypeGuard<infer B>, TypeGuard<infer C>] ? NetServerEvent<[TypeGuard<A>, TypeGuard<B>, TypeGuard<C>]> : T extends [TypeGuard<infer A>, TypeGuard<infer B>, TypeGuard<infer C>, TypeGuard<infer D>] ? NetServerEvent<[TypeGuard<A>, TypeGuard<B>, TypeGuard<C>, TypeGuard<D>]> : NetServerEvent;
declare type FilteredKeys<T, U> = {
    [P in keyof T]: T[P] extends U ? P : never;
}[keyof T];
declare type UsableEvents<T> = {
    [Q in FilteredKeys<T, true | TypeGuards<any>>]: InferEvent<T[Q]>;
};
interface EventList {
    [name: string]: ((player: Player, ...args: unknown[]) => void) | true | Array<TypeGuard<any>>;
}
/**
 * An event on the server
 * @rbxts server
 */
export default class NetServerEvent<C extends Array<any> = Array<unknown>, F extends Array<any> = Array<unknown>> implements IServerNetEvent, ServerRecieverEvent<C>, ServerSenderEvent<F> {
    protected propTypes: C | undefined;
    protected callTypes: F | undefined;
    /**
     * Creates a new instance of a server event (Will also create the corresponding remote if it does not exist!)
     * @param name The name of this server event
     * @throws If not created on server
     */
    constructor(name: string, ...recievedPropTypes: C);
    /**
     * Creates a RemoteEvent that's not managed by Net.
     *
     * Note: Any features like throttling, caching, type checking etc. will have to be handled by you.
     *
     * @param name The name
     */
    static Unmanaged(name: string): RemoteEvent;
    static Group<T extends EventList>(list: T): UsableEvents<T>;
    static PureReciever<C extends Array<any> = Array<unknown>>(name: string, cb: (plr: Player, ...args: StaticArguments<C>) => void, ...recievedPropTypes: C): ServerRecieverEvent<C>;
    static PureSender<C extends Array<any> = Array<unknown>>(name: string, ...recievedPropTypes: C): ServerSenderEvent<C>;
    WithStrictCall<F0 extends F>(...callPropTypes: F0): NetServerEvent<C, F0>;
    /**
     * The RemoteEvent instance
     */
    GetInstance(): RemoteEvent;
    /**
     * The RBXScriptSignal for this RemoteEvent
     */
    GetEvent(): RBXScriptSignal<(player: Player, ...arguments: unknown[]) => void>;
    /**
     * Connect a fucntion to fire when the event is invoked by the client
     * @param callback The function fired when the event is invoked by the client
     */
    Connect(callback: (sourcePlayer: Player, ...args: StaticArguments<C>) => void): RBXScriptConnection;
    /**
     * Sends the specified arguments to all players
     * @param args The arguments to send to the players
     */
    SendToAllPlayers(...args: StaticArguments<F>): void;
    /**
     * Will send this message to all players except specified players
     * @param blacklist The blacklist
     * @param args The arguments
     */
    SendToAllPlayersExcept(blacklist: Player | Array<Player>, ...args: StaticArguments<F>): void;
    /**
     * Sends the specified arguments to a specified player
     * @param player The player
     * @param args The arguments to send to the player
     */
    SendToPlayer(player: Player, ...args: StaticArguments<F>): void;
    /**
     * Sends the specified argumetns to the specified list of players
     * @param players The players
     * @param args The arugments to send to these players
     */
    SendToPlayers(players: Array<Player>, ...args: StaticArguments<F>): void;
}
export {};
